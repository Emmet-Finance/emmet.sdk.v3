/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IEmmetFeeOracle,
  IEmmetFeeOracleInterface,
} from "../../../contracts/PriceOracle/IEmmetFeeOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "coinName_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "calculateCoinFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destChainName_",
        type: "string",
      },
    ],
    name: "calculateTransactionFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "chainName_",
        type: "string",
      },
    ],
    name: "getChainByname",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "chainId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "domain",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "txFee",
            type: "uint64",
          },
          {
            internalType: "bytes14",
            name: "nativeCoin",
            type: "bytes14",
          },
        ],
        internalType: "struct IEmmetFeeOracle.Chain",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destDomain_",
        type: "uint64",
      },
    ],
    name: "getChainFee",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destDomain_",
        type: "uint64",
      },
    ],
    name: "getChainNameByDomain",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainId_",
        type: "uint64",
      },
    ],
    name: "getChainNameById",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "coinName_",
        type: "string",
      },
    ],
    name: "getCoinFee",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "minimum",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "percentage",
            type: "uint128",
          },
        ],
        internalType: "struct IEmmetFeeOracle.CoinFee",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "coinName",
        type: "string",
      },
    ],
    name: "getCoinPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "selfCoin",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IEmmetFeeOracle__factory {
  static readonly abi = _abi;
  static createInterface(): IEmmetFeeOracleInterface {
    return new Interface(_abi) as IEmmetFeeOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IEmmetFeeOracle {
    return new Contract(address, _abi, runner) as unknown as IEmmetFeeOracle;
  }
}
